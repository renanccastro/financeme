# source: https://us1.prisma.sh/public-neonbell-476/financeme/dev
# timestamp: Fri Jun 22 2018 23:16:43 GMT-0300 (Brasilia Standard Time)

type Account implements Node {
  id: ID!
  key: ID
  balance: String!
  updatedAt: DateTime!
  createdAt: DateTime!
  creditCard: Boolean!
  receiveAccount: Boolean!
  title: String!
  sheet(where: SheetWhereInput): Sheet!
}

"""A connection to a list of items."""
type AccountConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AccountEdge]!
  aggregate: AggregateAccount!
}

input AccountCreateInput {
  key: ID
  balance: String!
  creditCard: Boolean
  receiveAccount: Boolean
  title: String!
  sheet: SheetCreateOneWithoutAccountsInput!
}

input AccountCreateManyWithoutSheetInput {
  create: [AccountCreateWithoutSheetInput!]
  connect: [AccountWhereUniqueInput!]
}

input AccountCreateOneInput {
  create: AccountCreateInput
  connect: AccountWhereUniqueInput
}

input AccountCreateWithoutSheetInput {
  key: ID
  balance: String!
  creditCard: Boolean
  receiveAccount: Boolean
  title: String!
}

"""An edge in a connection."""
type AccountEdge {
  """The item at the end of the edge."""
  node: Account!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AccountOrderByInput {
  id_ASC
  id_DESC
  key_ASC
  key_DESC
  balance_ASC
  balance_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  creditCard_ASC
  creditCard_DESC
  receiveAccount_ASC
  receiveAccount_DESC
  title_ASC
  title_DESC
}

type AccountPreviousValues {
  id: ID!
  key: ID
  balance: String!
  updatedAt: DateTime!
  createdAt: DateTime!
  creditCard: Boolean!
  receiveAccount: Boolean!
  title: String!
}

type AccountSubscriptionPayload {
  mutation: MutationType!
  node: Account
  updatedFields: [String!]
  previousValues: AccountPreviousValues
}

input AccountSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AccountSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AccountSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AccountSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AccountWhereInput
}

input AccountUpdateDataInput {
  key: ID
  balance: String
  creditCard: Boolean
  receiveAccount: Boolean
  title: String
  sheet: SheetUpdateOneWithoutAccountsInput
}

input AccountUpdateInput {
  key: ID
  balance: String
  creditCard: Boolean
  receiveAccount: Boolean
  title: String
  sheet: SheetUpdateOneWithoutAccountsInput
}

input AccountUpdateManyWithoutSheetInput {
  create: [AccountCreateWithoutSheetInput!]
  connect: [AccountWhereUniqueInput!]
  disconnect: [AccountWhereUniqueInput!]
  delete: [AccountWhereUniqueInput!]
  update: [AccountUpdateWithWhereUniqueWithoutSheetInput!]
  upsert: [AccountUpsertWithWhereUniqueWithoutSheetInput!]
}

input AccountUpdateOneInput {
  create: AccountCreateInput
  connect: AccountWhereUniqueInput
  delete: Boolean
  update: AccountUpdateDataInput
  upsert: AccountUpsertNestedInput
}

input AccountUpdateWithoutSheetDataInput {
  key: ID
  balance: String
  creditCard: Boolean
  receiveAccount: Boolean
  title: String
}

input AccountUpdateWithWhereUniqueWithoutSheetInput {
  where: AccountWhereUniqueInput!
  data: AccountUpdateWithoutSheetDataInput!
}

input AccountUpsertNestedInput {
  update: AccountUpdateDataInput!
  create: AccountCreateInput!
}

input AccountUpsertWithWhereUniqueWithoutSheetInput {
  where: AccountWhereUniqueInput!
  update: AccountUpdateWithoutSheetDataInput!
  create: AccountCreateWithoutSheetInput!
}

input AccountWhereInput {
  """Logical AND on all given filters."""
  AND: [AccountWhereInput!]

  """Logical OR on all given filters."""
  OR: [AccountWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AccountWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  key: ID

  """All values that are not equal to given value."""
  key_not: ID

  """All values that are contained in given list."""
  key_in: [ID!]

  """All values that are not contained in given list."""
  key_not_in: [ID!]

  """All values less than the given value."""
  key_lt: ID

  """All values less than or equal the given value."""
  key_lte: ID

  """All values greater than the given value."""
  key_gt: ID

  """All values greater than or equal the given value."""
  key_gte: ID

  """All values containing the given string."""
  key_contains: ID

  """All values not containing the given string."""
  key_not_contains: ID

  """All values starting with the given string."""
  key_starts_with: ID

  """All values not starting with the given string."""
  key_not_starts_with: ID

  """All values ending with the given string."""
  key_ends_with: ID

  """All values not ending with the given string."""
  key_not_ends_with: ID
  balance: String

  """All values that are not equal to given value."""
  balance_not: String

  """All values that are contained in given list."""
  balance_in: [String!]

  """All values that are not contained in given list."""
  balance_not_in: [String!]

  """All values less than the given value."""
  balance_lt: String

  """All values less than or equal the given value."""
  balance_lte: String

  """All values greater than the given value."""
  balance_gt: String

  """All values greater than or equal the given value."""
  balance_gte: String

  """All values containing the given string."""
  balance_contains: String

  """All values not containing the given string."""
  balance_not_contains: String

  """All values starting with the given string."""
  balance_starts_with: String

  """All values not starting with the given string."""
  balance_not_starts_with: String

  """All values ending with the given string."""
  balance_ends_with: String

  """All values not ending with the given string."""
  balance_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  creditCard: Boolean

  """All values that are not equal to given value."""
  creditCard_not: Boolean
  receiveAccount: Boolean

  """All values that are not equal to given value."""
  receiveAccount_not: Boolean
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  sheet: SheetWhereInput
  _MagicalBackRelation_AccountToEntry_every: EntryWhereInput
  _MagicalBackRelation_AccountToEntry_some: EntryWhereInput
  _MagicalBackRelation_AccountToEntry_none: EntryWhereInput
  _MagicalBackRelation_AccountToInstallmentEntry_every: InstallmentEntryWhereInput
  _MagicalBackRelation_AccountToInstallmentEntry_some: InstallmentEntryWhereInput
  _MagicalBackRelation_AccountToInstallmentEntry_none: InstallmentEntryWhereInput
}

input AccountWhereUniqueInput {
  id: ID
  key: ID
}

type AggregateAccount {
  count: Int!
}

type AggregateCategory {
  count: Int!
}

type AggregateEntry {
  count: Int!
}

type AggregateInstallmentEntry {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateSheet {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Category implements Node {
  id: ID!
  key: ID
  title: String!
  sheet(where: SheetWhereInput): Sheet!
}

"""A connection to a list of items."""
type CategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  key: ID
  title: String!
  sheet: SheetCreateOneWithoutCategoriesInput!
}

input CategoryCreateManyWithoutSheetInput {
  create: [CategoryCreateWithoutSheetInput!]
  connect: [CategoryWhereUniqueInput!]
}

input CategoryCreateOneInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

input CategoryCreateWithoutSheetInput {
  key: ID
  title: String!
}

"""An edge in a connection."""
type CategoryEdge {
  """The item at the end of the edge."""
  node: Category!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  key_ASC
  key_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CategoryPreviousValues {
  id: ID!
  key: ID
  title: String!
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CategorySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CategorySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CategorySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
}

input CategoryUpdateDataInput {
  key: ID
  title: String
  sheet: SheetUpdateOneWithoutCategoriesInput
}

input CategoryUpdateInput {
  key: ID
  title: String
  sheet: SheetUpdateOneWithoutCategoriesInput
}

input CategoryUpdateManyWithoutSheetInput {
  create: [CategoryCreateWithoutSheetInput!]
  connect: [CategoryWhereUniqueInput!]
  disconnect: [CategoryWhereUniqueInput!]
  delete: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutSheetInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutSheetInput!]
}

input CategoryUpdateOneInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  delete: Boolean
  update: CategoryUpdateDataInput
  upsert: CategoryUpsertNestedInput
}

input CategoryUpdateWithoutSheetDataInput {
  key: ID
  title: String
}

input CategoryUpdateWithWhereUniqueWithoutSheetInput {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateWithoutSheetDataInput!
}

input CategoryUpsertNestedInput {
  update: CategoryUpdateDataInput!
  create: CategoryCreateInput!
}

input CategoryUpsertWithWhereUniqueWithoutSheetInput {
  where: CategoryWhereUniqueInput!
  update: CategoryUpdateWithoutSheetDataInput!
  create: CategoryCreateWithoutSheetInput!
}

input CategoryWhereInput {
  """Logical AND on all given filters."""
  AND: [CategoryWhereInput!]

  """Logical OR on all given filters."""
  OR: [CategoryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CategoryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  key: ID

  """All values that are not equal to given value."""
  key_not: ID

  """All values that are contained in given list."""
  key_in: [ID!]

  """All values that are not contained in given list."""
  key_not_in: [ID!]

  """All values less than the given value."""
  key_lt: ID

  """All values less than or equal the given value."""
  key_lte: ID

  """All values greater than the given value."""
  key_gt: ID

  """All values greater than or equal the given value."""
  key_gte: ID

  """All values containing the given string."""
  key_contains: ID

  """All values not containing the given string."""
  key_not_contains: ID

  """All values starting with the given string."""
  key_starts_with: ID

  """All values not starting with the given string."""
  key_not_starts_with: ID

  """All values ending with the given string."""
  key_ends_with: ID

  """All values not ending with the given string."""
  key_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  sheet: SheetWhereInput
  _MagicalBackRelation_CategoryToEntry_every: EntryWhereInput
  _MagicalBackRelation_CategoryToEntry_some: EntryWhereInput
  _MagicalBackRelation_CategoryToEntry_none: EntryWhereInput
  _MagicalBackRelation_CategoryToInstallmentEntry_every: InstallmentEntryWhereInput
  _MagicalBackRelation_CategoryToInstallmentEntry_some: InstallmentEntryWhereInput
  _MagicalBackRelation_CategoryToInstallmentEntry_none: InstallmentEntryWhereInput
}

input CategoryWhereUniqueInput {
  id: ID
  key: ID
}

scalar DateTime

type Entry implements Node {
  id: ID!
  key: ID
  value: String!
  budget: Boolean!
  updatedAt: DateTime!
  createdAt: DateTime!
  title: String!
  text: String
  author(where: UserWhereInput): User!
  account(where: AccountWhereInput): Account!
  category(where: CategoryWhereInput): Category!
  recurring: Boolean!
  paidDate: DateTime
  dueDate: DateTime!
  sheet(where: SheetWhereInput): Sheet!
}

"""A connection to a list of items."""
type EntryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EntryEdge]!
  aggregate: AggregateEntry!
}

input EntryCreateInput {
  key: ID
  value: String!
  budget: Boolean
  title: String!
  text: String
  recurring: Boolean
  paidDate: DateTime
  dueDate: DateTime!
  author: UserCreateOneInput!
  account: AccountCreateOneInput!
  category: CategoryCreateOneInput!
  sheet: SheetCreateOneWithoutEntriesInput!
}

input EntryCreateManyWithoutSheetInput {
  create: [EntryCreateWithoutSheetInput!]
  connect: [EntryWhereUniqueInput!]
}

input EntryCreateWithoutSheetInput {
  key: ID
  value: String!
  budget: Boolean
  title: String!
  text: String
  recurring: Boolean
  paidDate: DateTime
  dueDate: DateTime!
  author: UserCreateOneInput!
  account: AccountCreateOneInput!
  category: CategoryCreateOneInput!
}

"""An edge in a connection."""
type EntryEdge {
  """The item at the end of the edge."""
  node: Entry!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EntryOrderByInput {
  id_ASC
  id_DESC
  key_ASC
  key_DESC
  value_ASC
  value_DESC
  budget_ASC
  budget_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
  recurring_ASC
  recurring_DESC
  paidDate_ASC
  paidDate_DESC
  dueDate_ASC
  dueDate_DESC
}

type EntryPreviousValues {
  id: ID!
  key: ID
  value: String!
  budget: Boolean!
  updatedAt: DateTime!
  createdAt: DateTime!
  title: String!
  text: String
  recurring: Boolean!
  paidDate: DateTime
  dueDate: DateTime!
}

type EntrySubscriptionPayload {
  mutation: MutationType!
  node: Entry
  updatedFields: [String!]
  previousValues: EntryPreviousValues
}

input EntrySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EntrySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EntrySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EntrySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EntryWhereInput
}

input EntryUpdateInput {
  key: ID
  value: String
  budget: Boolean
  title: String
  text: String
  recurring: Boolean
  paidDate: DateTime
  dueDate: DateTime
  author: UserUpdateOneInput
  account: AccountUpdateOneInput
  category: CategoryUpdateOneInput
  sheet: SheetUpdateOneWithoutEntriesInput
}

input EntryUpdateManyWithoutSheetInput {
  create: [EntryCreateWithoutSheetInput!]
  connect: [EntryWhereUniqueInput!]
  disconnect: [EntryWhereUniqueInput!]
  delete: [EntryWhereUniqueInput!]
  update: [EntryUpdateWithWhereUniqueWithoutSheetInput!]
  upsert: [EntryUpsertWithWhereUniqueWithoutSheetInput!]
}

input EntryUpdateWithoutSheetDataInput {
  key: ID
  value: String
  budget: Boolean
  title: String
  text: String
  recurring: Boolean
  paidDate: DateTime
  dueDate: DateTime
  author: UserUpdateOneInput
  account: AccountUpdateOneInput
  category: CategoryUpdateOneInput
}

input EntryUpdateWithWhereUniqueWithoutSheetInput {
  where: EntryWhereUniqueInput!
  data: EntryUpdateWithoutSheetDataInput!
}

input EntryUpsertWithWhereUniqueWithoutSheetInput {
  where: EntryWhereUniqueInput!
  update: EntryUpdateWithoutSheetDataInput!
  create: EntryCreateWithoutSheetInput!
}

input EntryWhereInput {
  """Logical AND on all given filters."""
  AND: [EntryWhereInput!]

  """Logical OR on all given filters."""
  OR: [EntryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EntryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  key: ID

  """All values that are not equal to given value."""
  key_not: ID

  """All values that are contained in given list."""
  key_in: [ID!]

  """All values that are not contained in given list."""
  key_not_in: [ID!]

  """All values less than the given value."""
  key_lt: ID

  """All values less than or equal the given value."""
  key_lte: ID

  """All values greater than the given value."""
  key_gt: ID

  """All values greater than or equal the given value."""
  key_gte: ID

  """All values containing the given string."""
  key_contains: ID

  """All values not containing the given string."""
  key_not_contains: ID

  """All values starting with the given string."""
  key_starts_with: ID

  """All values not starting with the given string."""
  key_not_starts_with: ID

  """All values ending with the given string."""
  key_ends_with: ID

  """All values not ending with the given string."""
  key_not_ends_with: ID
  value: String

  """All values that are not equal to given value."""
  value_not: String

  """All values that are contained in given list."""
  value_in: [String!]

  """All values that are not contained in given list."""
  value_not_in: [String!]

  """All values less than the given value."""
  value_lt: String

  """All values less than or equal the given value."""
  value_lte: String

  """All values greater than the given value."""
  value_gt: String

  """All values greater than or equal the given value."""
  value_gte: String

  """All values containing the given string."""
  value_contains: String

  """All values not containing the given string."""
  value_not_contains: String

  """All values starting with the given string."""
  value_starts_with: String

  """All values not starting with the given string."""
  value_not_starts_with: String

  """All values ending with the given string."""
  value_ends_with: String

  """All values not ending with the given string."""
  value_not_ends_with: String
  budget: Boolean

  """All values that are not equal to given value."""
  budget_not: Boolean
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  recurring: Boolean

  """All values that are not equal to given value."""
  recurring_not: Boolean
  paidDate: DateTime

  """All values that are not equal to given value."""
  paidDate_not: DateTime

  """All values that are contained in given list."""
  paidDate_in: [DateTime!]

  """All values that are not contained in given list."""
  paidDate_not_in: [DateTime!]

  """All values less than the given value."""
  paidDate_lt: DateTime

  """All values less than or equal the given value."""
  paidDate_lte: DateTime

  """All values greater than the given value."""
  paidDate_gt: DateTime

  """All values greater than or equal the given value."""
  paidDate_gte: DateTime
  dueDate: DateTime

  """All values that are not equal to given value."""
  dueDate_not: DateTime

  """All values that are contained in given list."""
  dueDate_in: [DateTime!]

  """All values that are not contained in given list."""
  dueDate_not_in: [DateTime!]

  """All values less than the given value."""
  dueDate_lt: DateTime

  """All values less than or equal the given value."""
  dueDate_lte: DateTime

  """All values greater than the given value."""
  dueDate_gt: DateTime

  """All values greater than or equal the given value."""
  dueDate_gte: DateTime
  author: UserWhereInput
  account: AccountWhereInput
  category: CategoryWhereInput
  sheet: SheetWhereInput
}

input EntryWhereUniqueInput {
  id: ID
  key: ID
}

type InstallmentEntry implements Node {
  id: ID!
  key: ID
  value: String!
  account(where: AccountWhereInput): Account!
  sheet(where: SheetWhereInput): Sheet!
  category(where: CategoryWhereInput): Category!
}

"""A connection to a list of items."""
type InstallmentEntryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InstallmentEntryEdge]!
  aggregate: AggregateInstallmentEntry!
}

input InstallmentEntryCreateInput {
  key: ID
  value: String!
  account: AccountCreateOneInput!
  sheet: SheetCreateOneWithoutInstallmentsInput!
  category: CategoryCreateOneInput!
}

input InstallmentEntryCreateManyWithoutSheetInput {
  create: [InstallmentEntryCreateWithoutSheetInput!]
  connect: [InstallmentEntryWhereUniqueInput!]
}

input InstallmentEntryCreateWithoutSheetInput {
  key: ID
  value: String!
  account: AccountCreateOneInput!
  category: CategoryCreateOneInput!
}

"""An edge in a connection."""
type InstallmentEntryEdge {
  """The item at the end of the edge."""
  node: InstallmentEntry!

  """A cursor for use in pagination."""
  cursor: String!
}

enum InstallmentEntryOrderByInput {
  id_ASC
  id_DESC
  key_ASC
  key_DESC
  value_ASC
  value_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type InstallmentEntryPreviousValues {
  id: ID!
  key: ID
  value: String!
}

type InstallmentEntrySubscriptionPayload {
  mutation: MutationType!
  node: InstallmentEntry
  updatedFields: [String!]
  previousValues: InstallmentEntryPreviousValues
}

input InstallmentEntrySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InstallmentEntrySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InstallmentEntrySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InstallmentEntrySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InstallmentEntryWhereInput
}

input InstallmentEntryUpdateInput {
  key: ID
  value: String
  account: AccountUpdateOneInput
  sheet: SheetUpdateOneWithoutInstallmentsInput
  category: CategoryUpdateOneInput
}

input InstallmentEntryUpdateManyWithoutSheetInput {
  create: [InstallmentEntryCreateWithoutSheetInput!]
  connect: [InstallmentEntryWhereUniqueInput!]
  disconnect: [InstallmentEntryWhereUniqueInput!]
  delete: [InstallmentEntryWhereUniqueInput!]
  update: [InstallmentEntryUpdateWithWhereUniqueWithoutSheetInput!]
  upsert: [InstallmentEntryUpsertWithWhereUniqueWithoutSheetInput!]
}

input InstallmentEntryUpdateWithoutSheetDataInput {
  key: ID
  value: String
  account: AccountUpdateOneInput
  category: CategoryUpdateOneInput
}

input InstallmentEntryUpdateWithWhereUniqueWithoutSheetInput {
  where: InstallmentEntryWhereUniqueInput!
  data: InstallmentEntryUpdateWithoutSheetDataInput!
}

input InstallmentEntryUpsertWithWhereUniqueWithoutSheetInput {
  where: InstallmentEntryWhereUniqueInput!
  update: InstallmentEntryUpdateWithoutSheetDataInput!
  create: InstallmentEntryCreateWithoutSheetInput!
}

input InstallmentEntryWhereInput {
  """Logical AND on all given filters."""
  AND: [InstallmentEntryWhereInput!]

  """Logical OR on all given filters."""
  OR: [InstallmentEntryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InstallmentEntryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  key: ID

  """All values that are not equal to given value."""
  key_not: ID

  """All values that are contained in given list."""
  key_in: [ID!]

  """All values that are not contained in given list."""
  key_not_in: [ID!]

  """All values less than the given value."""
  key_lt: ID

  """All values less than or equal the given value."""
  key_lte: ID

  """All values greater than the given value."""
  key_gt: ID

  """All values greater than or equal the given value."""
  key_gte: ID

  """All values containing the given string."""
  key_contains: ID

  """All values not containing the given string."""
  key_not_contains: ID

  """All values starting with the given string."""
  key_starts_with: ID

  """All values not starting with the given string."""
  key_not_starts_with: ID

  """All values ending with the given string."""
  key_ends_with: ID

  """All values not ending with the given string."""
  key_not_ends_with: ID
  value: String

  """All values that are not equal to given value."""
  value_not: String

  """All values that are contained in given list."""
  value_in: [String!]

  """All values that are not contained in given list."""
  value_not_in: [String!]

  """All values less than the given value."""
  value_lt: String

  """All values less than or equal the given value."""
  value_lte: String

  """All values greater than the given value."""
  value_gt: String

  """All values greater than or equal the given value."""
  value_gte: String

  """All values containing the given string."""
  value_contains: String

  """All values not containing the given string."""
  value_not_contains: String

  """All values starting with the given string."""
  value_starts_with: String

  """All values not starting with the given string."""
  value_not_starts_with: String

  """All values ending with the given string."""
  value_ends_with: String

  """All values not ending with the given string."""
  value_not_ends_with: String
  account: AccountWhereInput
  sheet: SheetWhereInput
  category: CategoryWhereInput
}

input InstallmentEntryWhereUniqueInput {
  id: ID
  key: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createPost(data: PostCreateInput!): Post!
  createSheet(data: SheetCreateInput!): Sheet!
  createInstallmentEntry(data: InstallmentEntryCreateInput!): InstallmentEntry!
  createEntry(data: EntryCreateInput!): Entry!
  createUser(data: UserCreateInput!): User!
  createCategory(data: CategoryCreateInput!): Category!
  createAccount(data: AccountCreateInput!): Account!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateSheet(data: SheetUpdateInput!, where: SheetWhereUniqueInput!): Sheet
  updateInstallmentEntry(data: InstallmentEntryUpdateInput!, where: InstallmentEntryWhereUniqueInput!): InstallmentEntry
  updateEntry(data: EntryUpdateInput!, where: EntryWhereUniqueInput!): Entry
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateAccount(data: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account
  deletePost(where: PostWhereUniqueInput!): Post
  deleteSheet(where: SheetWhereUniqueInput!): Sheet
  deleteInstallmentEntry(where: InstallmentEntryWhereUniqueInput!): InstallmentEntry
  deleteEntry(where: EntryWhereUniqueInput!): Entry
  deleteUser(where: UserWhereUniqueInput!): User
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteAccount(where: AccountWhereUniqueInput!): Account
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertSheet(where: SheetWhereUniqueInput!, create: SheetCreateInput!, update: SheetUpdateInput!): Sheet!
  upsertInstallmentEntry(where: InstallmentEntryWhereUniqueInput!, create: InstallmentEntryCreateInput!, update: InstallmentEntryUpdateInput!): InstallmentEntry!
  upsertEntry(where: EntryWhereUniqueInput!, create: EntryCreateInput!, update: EntryUpdateInput!): Entry!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertCategory(where: CategoryWhereUniqueInput!, create: CategoryCreateInput!, update: CategoryUpdateInput!): Category!
  upsertAccount(where: AccountWhereUniqueInput!, create: AccountCreateInput!, update: AccountUpdateInput!): Account!
  updateManyPosts(data: PostUpdateInput!, where: PostWhereInput): BatchPayload!
  updateManySheets(data: SheetUpdateInput!, where: SheetWhereInput): BatchPayload!
  updateManyInstallmentEntries(data: InstallmentEntryUpdateInput!, where: InstallmentEntryWhereInput): BatchPayload!
  updateManyEntries(data: EntryUpdateInput!, where: EntryWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyCategories(data: CategoryUpdateInput!, where: CategoryWhereInput): BatchPayload!
  updateManyAccounts(data: AccountUpdateInput!, where: AccountWhereInput): BatchPayload!
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  deleteManySheets(where: SheetWhereInput): BatchPayload!
  deleteManyInstallmentEntries(where: InstallmentEntryWhereInput): BatchPayload!
  deleteManyEntries(where: EntryWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  deleteManyAccounts(where: AccountWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Post implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isPublished: Boolean!
  title: String!
  text: String!
  author(where: UserWhereInput): User!
}

"""A connection to a list of items."""
type PostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  isPublished: Boolean
  title: String!
  text: String!
  author: UserCreateOneInput!
}

"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge."""
  node: Post!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  isPublished_ASC
  isPublished_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
}

type PostPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isPublished: Boolean!
  title: String!
  text: String!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PostSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  isPublished: Boolean
  title: String
  text: String
  author: UserUpdateOneInput
}

input PostWhereInput {
  """Logical AND on all given filters."""
  AND: [PostWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  isPublished: Boolean

  """All values that are not equal to given value."""
  isPublished_not: Boolean
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  author: UserWhereInput
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  sheets(where: SheetWhereInput, orderBy: SheetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Sheet]!
  installmentEntries(where: InstallmentEntryWhereInput, orderBy: InstallmentEntryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InstallmentEntry]!
  entries(where: EntryWhereInput, orderBy: EntryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Entry]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
  accounts(where: AccountWhereInput, orderBy: AccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Account]!
  post(where: PostWhereUniqueInput!): Post
  sheet(where: SheetWhereUniqueInput!): Sheet
  installmentEntry(where: InstallmentEntryWhereUniqueInput!): InstallmentEntry
  entry(where: EntryWhereUniqueInput!): Entry
  user(where: UserWhereUniqueInput!): User
  category(where: CategoryWhereUniqueInput!): Category
  account(where: AccountWhereUniqueInput!): Account
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  sheetsConnection(where: SheetWhereInput, orderBy: SheetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SheetConnection!
  installmentEntriesConnection(where: InstallmentEntryWhereInput, orderBy: InstallmentEntryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InstallmentEntryConnection!
  entriesConnection(where: EntryWhereInput, orderBy: EntryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EntryConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  categoriesConnection(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!
  accountsConnection(where: AccountWhereInput, orderBy: AccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AccountConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Sheet implements Node {
  id: ID!
  key: ID
  installments(where: InstallmentEntryWhereInput, orderBy: InstallmentEntryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InstallmentEntry!]
  entries(where: EntryWhereInput, orderBy: EntryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Entry!]
  accounts(where: AccountWhereInput, orderBy: AccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Account!]
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category!]
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

"""A connection to a list of items."""
type SheetConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SheetEdge]!
  aggregate: AggregateSheet!
}

input SheetCreateInput {
  key: ID
  installments: InstallmentEntryCreateManyWithoutSheetInput
  entries: EntryCreateManyWithoutSheetInput
  accounts: AccountCreateManyWithoutSheetInput
  categories: CategoryCreateManyWithoutSheetInput
  users: UserCreateManyWithoutSheetsInput
}

input SheetCreateManyWithoutUsersInput {
  create: [SheetCreateWithoutUsersInput!]
  connect: [SheetWhereUniqueInput!]
}

input SheetCreateOneWithoutAccountsInput {
  create: SheetCreateWithoutAccountsInput
  connect: SheetWhereUniqueInput
}

input SheetCreateOneWithoutCategoriesInput {
  create: SheetCreateWithoutCategoriesInput
  connect: SheetWhereUniqueInput
}

input SheetCreateOneWithoutEntriesInput {
  create: SheetCreateWithoutEntriesInput
  connect: SheetWhereUniqueInput
}

input SheetCreateOneWithoutInstallmentsInput {
  create: SheetCreateWithoutInstallmentsInput
  connect: SheetWhereUniqueInput
}

input SheetCreateWithoutAccountsInput {
  key: ID
  installments: InstallmentEntryCreateManyWithoutSheetInput
  entries: EntryCreateManyWithoutSheetInput
  categories: CategoryCreateManyWithoutSheetInput
  users: UserCreateManyWithoutSheetsInput
}

input SheetCreateWithoutCategoriesInput {
  key: ID
  installments: InstallmentEntryCreateManyWithoutSheetInput
  entries: EntryCreateManyWithoutSheetInput
  accounts: AccountCreateManyWithoutSheetInput
  users: UserCreateManyWithoutSheetsInput
}

input SheetCreateWithoutEntriesInput {
  key: ID
  installments: InstallmentEntryCreateManyWithoutSheetInput
  accounts: AccountCreateManyWithoutSheetInput
  categories: CategoryCreateManyWithoutSheetInput
  users: UserCreateManyWithoutSheetsInput
}

input SheetCreateWithoutInstallmentsInput {
  key: ID
  entries: EntryCreateManyWithoutSheetInput
  accounts: AccountCreateManyWithoutSheetInput
  categories: CategoryCreateManyWithoutSheetInput
  users: UserCreateManyWithoutSheetsInput
}

input SheetCreateWithoutUsersInput {
  key: ID
  installments: InstallmentEntryCreateManyWithoutSheetInput
  entries: EntryCreateManyWithoutSheetInput
  accounts: AccountCreateManyWithoutSheetInput
  categories: CategoryCreateManyWithoutSheetInput
}

"""An edge in a connection."""
type SheetEdge {
  """The item at the end of the edge."""
  node: Sheet!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SheetOrderByInput {
  id_ASC
  id_DESC
  key_ASC
  key_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SheetPreviousValues {
  id: ID!
  key: ID
}

type SheetSubscriptionPayload {
  mutation: MutationType!
  node: Sheet
  updatedFields: [String!]
  previousValues: SheetPreviousValues
}

input SheetSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SheetSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SheetSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SheetSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SheetWhereInput
}

input SheetUpdateInput {
  key: ID
  installments: InstallmentEntryUpdateManyWithoutSheetInput
  entries: EntryUpdateManyWithoutSheetInput
  accounts: AccountUpdateManyWithoutSheetInput
  categories: CategoryUpdateManyWithoutSheetInput
  users: UserUpdateManyWithoutSheetsInput
}

input SheetUpdateManyWithoutUsersInput {
  create: [SheetCreateWithoutUsersInput!]
  connect: [SheetWhereUniqueInput!]
  disconnect: [SheetWhereUniqueInput!]
  delete: [SheetWhereUniqueInput!]
  update: [SheetUpdateWithWhereUniqueWithoutUsersInput!]
  upsert: [SheetUpsertWithWhereUniqueWithoutUsersInput!]
}

input SheetUpdateOneWithoutAccountsInput {
  create: SheetCreateWithoutAccountsInput
  connect: SheetWhereUniqueInput
  delete: Boolean
  update: SheetUpdateWithoutAccountsDataInput
  upsert: SheetUpsertWithoutAccountsInput
}

input SheetUpdateOneWithoutCategoriesInput {
  create: SheetCreateWithoutCategoriesInput
  connect: SheetWhereUniqueInput
  delete: Boolean
  update: SheetUpdateWithoutCategoriesDataInput
  upsert: SheetUpsertWithoutCategoriesInput
}

input SheetUpdateOneWithoutEntriesInput {
  create: SheetCreateWithoutEntriesInput
  connect: SheetWhereUniqueInput
  delete: Boolean
  update: SheetUpdateWithoutEntriesDataInput
  upsert: SheetUpsertWithoutEntriesInput
}

input SheetUpdateOneWithoutInstallmentsInput {
  create: SheetCreateWithoutInstallmentsInput
  connect: SheetWhereUniqueInput
  delete: Boolean
  update: SheetUpdateWithoutInstallmentsDataInput
  upsert: SheetUpsertWithoutInstallmentsInput
}

input SheetUpdateWithoutAccountsDataInput {
  key: ID
  installments: InstallmentEntryUpdateManyWithoutSheetInput
  entries: EntryUpdateManyWithoutSheetInput
  categories: CategoryUpdateManyWithoutSheetInput
  users: UserUpdateManyWithoutSheetsInput
}

input SheetUpdateWithoutCategoriesDataInput {
  key: ID
  installments: InstallmentEntryUpdateManyWithoutSheetInput
  entries: EntryUpdateManyWithoutSheetInput
  accounts: AccountUpdateManyWithoutSheetInput
  users: UserUpdateManyWithoutSheetsInput
}

input SheetUpdateWithoutEntriesDataInput {
  key: ID
  installments: InstallmentEntryUpdateManyWithoutSheetInput
  accounts: AccountUpdateManyWithoutSheetInput
  categories: CategoryUpdateManyWithoutSheetInput
  users: UserUpdateManyWithoutSheetsInput
}

input SheetUpdateWithoutInstallmentsDataInput {
  key: ID
  entries: EntryUpdateManyWithoutSheetInput
  accounts: AccountUpdateManyWithoutSheetInput
  categories: CategoryUpdateManyWithoutSheetInput
  users: UserUpdateManyWithoutSheetsInput
}

input SheetUpdateWithoutUsersDataInput {
  key: ID
  installments: InstallmentEntryUpdateManyWithoutSheetInput
  entries: EntryUpdateManyWithoutSheetInput
  accounts: AccountUpdateManyWithoutSheetInput
  categories: CategoryUpdateManyWithoutSheetInput
}

input SheetUpdateWithWhereUniqueWithoutUsersInput {
  where: SheetWhereUniqueInput!
  data: SheetUpdateWithoutUsersDataInput!
}

input SheetUpsertWithoutAccountsInput {
  update: SheetUpdateWithoutAccountsDataInput!
  create: SheetCreateWithoutAccountsInput!
}

input SheetUpsertWithoutCategoriesInput {
  update: SheetUpdateWithoutCategoriesDataInput!
  create: SheetCreateWithoutCategoriesInput!
}

input SheetUpsertWithoutEntriesInput {
  update: SheetUpdateWithoutEntriesDataInput!
  create: SheetCreateWithoutEntriesInput!
}

input SheetUpsertWithoutInstallmentsInput {
  update: SheetUpdateWithoutInstallmentsDataInput!
  create: SheetCreateWithoutInstallmentsInput!
}

input SheetUpsertWithWhereUniqueWithoutUsersInput {
  where: SheetWhereUniqueInput!
  update: SheetUpdateWithoutUsersDataInput!
  create: SheetCreateWithoutUsersInput!
}

input SheetWhereInput {
  """Logical AND on all given filters."""
  AND: [SheetWhereInput!]

  """Logical OR on all given filters."""
  OR: [SheetWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SheetWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  key: ID

  """All values that are not equal to given value."""
  key_not: ID

  """All values that are contained in given list."""
  key_in: [ID!]

  """All values that are not contained in given list."""
  key_not_in: [ID!]

  """All values less than the given value."""
  key_lt: ID

  """All values less than or equal the given value."""
  key_lte: ID

  """All values greater than the given value."""
  key_gt: ID

  """All values greater than or equal the given value."""
  key_gte: ID

  """All values containing the given string."""
  key_contains: ID

  """All values not containing the given string."""
  key_not_contains: ID

  """All values starting with the given string."""
  key_starts_with: ID

  """All values not starting with the given string."""
  key_not_starts_with: ID

  """All values ending with the given string."""
  key_ends_with: ID

  """All values not ending with the given string."""
  key_not_ends_with: ID
  installments_every: InstallmentEntryWhereInput
  installments_some: InstallmentEntryWhereInput
  installments_none: InstallmentEntryWhereInput
  entries_every: EntryWhereInput
  entries_some: EntryWhereInput
  entries_none: EntryWhereInput
  accounts_every: AccountWhereInput
  accounts_some: AccountWhereInput
  accounts_none: AccountWhereInput
  categories_every: CategoryWhereInput
  categories_some: CategoryWhereInput
  categories_none: CategoryWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
}

input SheetWhereUniqueInput {
  id: ID
  key: ID
}

type Subscription {
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  sheet(where: SheetSubscriptionWhereInput): SheetSubscriptionPayload
  installmentEntry(where: InstallmentEntrySubscriptionWhereInput): InstallmentEntrySubscriptionPayload
  entry(where: EntrySubscriptionWhereInput): EntrySubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
  account(where: AccountSubscriptionWhereInput): AccountSubscriptionPayload
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  name: String!
  sheets(where: SheetWhereInput, orderBy: SheetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Sheet!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  name: String!
  sheets: SheetCreateManyWithoutUsersInput
}

input UserCreateManyWithoutSheetsInput {
  create: [UserCreateWithoutSheetsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutSheetsInput {
  email: String!
  password: String!
  name: String!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  email: String
  password: String
  name: String
  sheets: SheetUpdateManyWithoutUsersInput
}

input UserUpdateInput {
  email: String
  password: String
  name: String
  sheets: SheetUpdateManyWithoutUsersInput
}

input UserUpdateManyWithoutSheetsInput {
  create: [UserCreateWithoutSheetsInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutSheetsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutSheetsInput!]
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateWithoutSheetsDataInput {
  email: String
  password: String
  name: String
}

input UserUpdateWithWhereUniqueWithoutSheetsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutSheetsDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithWhereUniqueWithoutSheetsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutSheetsDataInput!
  create: UserCreateWithoutSheetsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  sheets_every: SheetWhereInput
  sheets_some: SheetWhereInput
  sheets_none: SheetWhereInput
  _MagicalBackRelation_PostToUser_every: PostWhereInput
  _MagicalBackRelation_PostToUser_some: PostWhereInput
  _MagicalBackRelation_PostToUser_none: PostWhereInput
  _MagicalBackRelation_EntryToUser_every: EntryWhereInput
  _MagicalBackRelation_EntryToUser_some: EntryWhereInput
  _MagicalBackRelation_EntryToUser_none: EntryWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
